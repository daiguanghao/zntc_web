package com.eqy.web.service.impl;
import java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.DisabledAccountException;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.eqy.web.pojo.PermissionBean;
import com.eqy.web.pojo.UserBean;
import com.eqy.web.service.user.IUserService;


@Component(value = "shiroDbRealm")
public class ShiroDbRealm extends AuthorizingRealm
{
    @Autowired
    protected IUserService userService;
    /**
     * 认证回调函数,登录时调用.
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authcToken) throws AuthenticationException
    {
        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;
        // 通过数据库进行账户验证
        final UserBean user = this.userService.selectUserByAccountNum(token.getUsername());
        if (user == null)
        {
            throw new UnknownAccountException("帐号不存在");
        }
        else if ("1".equals(user.getfState()))
        {
            throw new DisabledAccountException("帐号已被禁用");
        }
        return new SimpleAuthenticationInfo(new ShiroUser(user.getfAccountNumber(), user.getfAccountPassword()), user.getfAccountPassword(),
                getName());
    }
    /**
     * 授权查询回调函数, 进行鉴权但缓存中无用户的授权信息时调用.
     */
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
    {
        ShiroUser shiroUser = (ShiroUser) principals.getPrimaryPrincipal();
        final UserBean user = this.userService.selectUserByAccountNum(shiroUser.userAccount);
        if (user == null)
        {
            return null;
        }
        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
        info.addRole(user.getfAccountNumber());
        final List<PermissionBean> permList = this.userService.selectPermListByAccount(user.getfAccountNumber());
        for (PermissionBean perm : permList)
        {
            if ("0".equals(perm.getfState()))
            {
                info.addStringPermission(perm.getfPermissionName());
            }
        }
        return info;
    }
    /**
     * 设定Password校验.
     */
    @PostConstruct
    public void initCredentialsMatcher()
    {
       // HashedCredentialsMatcher matcher = new HashedCredentialsMatcher("MD5");
       // setCredentialsMatcher(matcher);
    }
    /**
     * 自定义Authentication对象，使得Subject只携带用户的登录名和密码.
     */
    public static class ShiroUser implements Serializable
    {
        private static final long serialVersionUID = -1373760761780840081L;
        public String userAccount;
        public String userPassword;
        public ShiroUser(String userAccount, String userPassword)
        {
            this.userAccount = userAccount;
            this.userPassword = userPassword;
        }
        public String getName()
        {
            return userAccount;
        }
        /**
         * 本函数输出将作为默认的<shiro:principal/>输出.
         */
        @Override
        public String toString()
        {
            return userAccount;
        }
    }
}
